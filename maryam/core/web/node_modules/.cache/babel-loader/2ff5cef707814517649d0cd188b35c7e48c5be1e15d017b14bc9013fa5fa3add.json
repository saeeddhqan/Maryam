{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { ActionTypes } from './useListbox.types';\nimport defaultReducer from './defaultListboxReducer';\nimport useControllableReducer from './useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst defaultOptionComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsOptionDisabled = () => false;\nconst defaultOptionStringifier = option => typeof option === 'string' ? option : String(option);\n\n/**\n * @ignore - do not document.\n */\nexport default function useListbox(props) {\n  var _props$optionIdGenera;\n  const {\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    id: idProp,\n    isOptionDisabled = defaultIsOptionDisabled,\n    listboxRef: externalListboxRef,\n    multiple = false,\n    optionComparer = defaultOptionComparer,\n    optionStringifier = defaultOptionStringifier,\n    options,\n    stateReducer: externalReducer,\n    value: valueParam\n  } = props;\n  const id = useId(idProp);\n  const defaultIdGenerator = React.useCallback((_, index) => `${id}-option-${index}`, [id]);\n  const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;\n  const propsWithDefaults = useLatest(_extends({}, props, {\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement,\n    isOptionDisabled,\n    multiple,\n    optionComparer,\n    optionStringifier\n  }), [props]);\n  const listboxRef = React.useRef(null);\n  const handleRef = useForkRef(externalListboxRef, listboxRef);\n  const [{\n    highlightedValue,\n    selectedValue\n  }, dispatch] = useControllableReducer(defaultReducer, externalReducer, propsWithDefaults);\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n  React.useEffect(() => {\n    // if a controlled value changes, we need to update the state to keep things in sync\n    if (valueParam !== undefined && valueParam !== selectedValue) {\n      dispatch({\n        type: ActionTypes.setValue,\n        event: null,\n        value: valueParam\n      });\n    }\n  }, [valueParam, selectedValue, dispatch]);\n  const highlightedIndex = React.useMemo(() => {\n    return highlightedValue == null ? -1 : options.findIndex(option => optionComparer(option, highlightedValue));\n  }, [highlightedValue, options, optionComparer]);\n\n  // introducing refs to avoid recreating the getOptionState function on each change.\n  const latestSelectedValue = useLatest(selectedValue);\n  const latestHighlightedIndex = useLatest(highlightedIndex);\n  const previousOptions = React.useRef([]);\n  React.useEffect(() => {\n    if (areArraysEqual(previousOptions.current, options, optionComparer)) {\n      return;\n    }\n    dispatch({\n      type: ActionTypes.optionsChange,\n      event: null,\n      options,\n      previousOptions: previousOptions.current\n    });\n    previousOptions.current = options;\n  }, [options, optionComparer, dispatch]);\n  const setSelectedValue = React.useCallback(option => {\n    dispatch({\n      type: ActionTypes.setValue,\n      event: null,\n      value: option\n    });\n  }, [dispatch]);\n  const setHighlightedValue = React.useCallback(option => {\n    dispatch({\n      type: ActionTypes.setHighlight,\n      event: null,\n      highlight: option\n    });\n  }, [dispatch]);\n  const createHandleOptionClick = React.useCallback((option, other) => event => {\n    var _other$onClick;\n    (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    event.preventDefault();\n    dispatch({\n      type: ActionTypes.optionClick,\n      option,\n      event\n    });\n  }, [dispatch]);\n  const createHandleOptionPointerOver = React.useCallback((option, other) => event => {\n    var _other$onMouseOver;\n    (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    dispatch({\n      type: ActionTypes.optionHover,\n      option,\n      event\n    });\n  }, [dispatch]);\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'];\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the listbox handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ActionTypes.keyDown,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listboxRef$current;\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {\n      // focus is within the listbox\n      return;\n    }\n    dispatch({\n      type: ActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : undefined,\n      id,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      role: 'listbox',\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  const getOptionState = React.useCallback(option => {\n    let selected;\n    const index = options.findIndex(opt => optionComparer(opt, option));\n    if (multiple) {\n      var _ref;\n      selected = ((_ref = latestSelectedValue.current) != null ? _ref : []).some(value => value != null && optionComparer(option, value));\n    } else {\n      selected = optionComparer(option, latestSelectedValue.current);\n    }\n    const disabled = isOptionDisabled(option, index);\n    const highlighted = latestHighlightedIndex.current === index && index !== -1;\n    return {\n      disabled,\n      highlighted,\n      index,\n      selected\n    };\n  }, [options, multiple, isOptionDisabled, optionComparer, latestSelectedValue, latestHighlightedIndex]);\n  const getOptionTabIndex = React.useCallback(optionState => {\n    if (focusManagement === 'activeDescendant') {\n      return undefined;\n    }\n    if (!optionState.highlighted) {\n      return -1;\n    }\n    if (optionState.disabled && !disabledItemsFocusable) {\n      return -1;\n    }\n    return 0;\n  }, [focusManagement, disabledItemsFocusable]);\n  const getOptionProps = React.useCallback(function (option) {\n    let otherHandlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const optionState = getOptionState(option);\n    return _extends({}, otherHandlers, {\n      'aria-disabled': optionState.disabled || undefined,\n      'aria-selected': optionState.selected,\n      id: optionIdGenerator(option, optionState.index),\n      onClick: createHandleOptionClick(option, otherHandlers),\n      onPointerOver: createHandleOptionPointerOver(option, otherHandlers),\n      role: 'option',\n      tabIndex: getOptionTabIndex(optionState)\n    });\n  }, [optionIdGenerator, createHandleOptionClick, createHandleOptionPointerOver, getOptionTabIndex, getOptionState]);\n  React.useDebugValue({\n    highlightedOption: highlightedValue,\n    selectedOption: selectedValue\n  });\n  return {\n    getRootProps,\n    getOptionProps,\n    getOptionState,\n    highlightedOption: highlightedValue,\n    selectedOption: selectedValue,\n    setSelectedValue,\n    setHighlightedValue\n  };\n}","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","ActionTypes","defaultReducer","useControllableReducer","areArraysEqual","useLatest","useTextNavigation","defaultOptionComparer","optionA","optionB","defaultIsOptionDisabled","defaultOptionStringifier","option","String","useListbox","props","_props$optionIdGenera","disabledItemsFocusable","disableListWrap","focusManagement","id","idProp","isOptionDisabled","listboxRef","externalListboxRef","multiple","optionComparer","optionStringifier","options","stateReducer","externalReducer","value","valueParam","defaultIdGenerator","useCallback","_","index","optionIdGenerator","propsWithDefaults","useRef","handleRef","highlightedValue","selectedValue","dispatch","handleTextNavigation","searchString","event","type","textNavigation","useEffect","undefined","setValue","highlightedIndex","useMemo","findIndex","latestSelectedValue","latestHighlightedIndex","previousOptions","current","optionsChange","setSelectedValue","setHighlightedValue","setHighlight","highlight","createHandleOptionClick","other","_other$onClick","onClick","call","defaultPrevented","preventDefault","optionClick","createHandleOptionPointerOver","_other$onMouseOver","onMouseOver","optionHover","createHandleKeyDown","_other$onKeyDown","onKeyDown","keysToPreventDefault","push","includes","key","keyDown","createHandleBlur","_other$onBlur","_listboxRef$current","onBlur","contains","document","activeElement","blur","getRootProps","otherHandlers","role","tabIndex","ref","getOptionState","selected","opt","_ref","some","disabled","highlighted","getOptionTabIndex","optionState","getOptionProps","onPointerOver","useDebugValue","highlightedOption","selectedOption"],"sources":["/home/vasu/Gsoc/website/project/node_modules/@mui/base/ListboxUnstyled/useListbox.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { ActionTypes } from './useListbox.types';\nimport defaultReducer from './defaultListboxReducer';\nimport useControllableReducer from './useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst defaultOptionComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsOptionDisabled = () => false;\nconst defaultOptionStringifier = option => typeof option === 'string' ? option : String(option);\n\n/**\n * @ignore - do not document.\n */\nexport default function useListbox(props) {\n  var _props$optionIdGenera;\n  const {\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    id: idProp,\n    isOptionDisabled = defaultIsOptionDisabled,\n    listboxRef: externalListboxRef,\n    multiple = false,\n    optionComparer = defaultOptionComparer,\n    optionStringifier = defaultOptionStringifier,\n    options,\n    stateReducer: externalReducer,\n    value: valueParam\n  } = props;\n  const id = useId(idProp);\n  const defaultIdGenerator = React.useCallback((_, index) => `${id}-option-${index}`, [id]);\n  const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;\n  const propsWithDefaults = useLatest(_extends({}, props, {\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement,\n    isOptionDisabled,\n    multiple,\n    optionComparer,\n    optionStringifier\n  }), [props]);\n  const listboxRef = React.useRef(null);\n  const handleRef = useForkRef(externalListboxRef, listboxRef);\n  const [{\n    highlightedValue,\n    selectedValue\n  }, dispatch] = useControllableReducer(defaultReducer, externalReducer, propsWithDefaults);\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n  React.useEffect(() => {\n    // if a controlled value changes, we need to update the state to keep things in sync\n    if (valueParam !== undefined && valueParam !== selectedValue) {\n      dispatch({\n        type: ActionTypes.setValue,\n        event: null,\n        value: valueParam\n      });\n    }\n  }, [valueParam, selectedValue, dispatch]);\n  const highlightedIndex = React.useMemo(() => {\n    return highlightedValue == null ? -1 : options.findIndex(option => optionComparer(option, highlightedValue));\n  }, [highlightedValue, options, optionComparer]);\n\n  // introducing refs to avoid recreating the getOptionState function on each change.\n  const latestSelectedValue = useLatest(selectedValue);\n  const latestHighlightedIndex = useLatest(highlightedIndex);\n  const previousOptions = React.useRef([]);\n  React.useEffect(() => {\n    if (areArraysEqual(previousOptions.current, options, optionComparer)) {\n      return;\n    }\n    dispatch({\n      type: ActionTypes.optionsChange,\n      event: null,\n      options,\n      previousOptions: previousOptions.current\n    });\n    previousOptions.current = options;\n  }, [options, optionComparer, dispatch]);\n  const setSelectedValue = React.useCallback(option => {\n    dispatch({\n      type: ActionTypes.setValue,\n      event: null,\n      value: option\n    });\n  }, [dispatch]);\n  const setHighlightedValue = React.useCallback(option => {\n    dispatch({\n      type: ActionTypes.setHighlight,\n      event: null,\n      highlight: option\n    });\n  }, [dispatch]);\n  const createHandleOptionClick = React.useCallback((option, other) => event => {\n    var _other$onClick;\n    (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    event.preventDefault();\n    dispatch({\n      type: ActionTypes.optionClick,\n      option,\n      event\n    });\n  }, [dispatch]);\n  const createHandleOptionPointerOver = React.useCallback((option, other) => event => {\n    var _other$onMouseOver;\n    (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    dispatch({\n      type: ActionTypes.optionHover,\n      option,\n      event\n    });\n  }, [dispatch]);\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'];\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the listbox handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ActionTypes.keyDown,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listboxRef$current;\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {\n      // focus is within the listbox\n      return;\n    }\n    dispatch({\n      type: ActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : undefined,\n      id,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      role: 'listbox',\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  const getOptionState = React.useCallback(option => {\n    let selected;\n    const index = options.findIndex(opt => optionComparer(opt, option));\n    if (multiple) {\n      var _ref;\n      selected = ((_ref = latestSelectedValue.current) != null ? _ref : []).some(value => value != null && optionComparer(option, value));\n    } else {\n      selected = optionComparer(option, latestSelectedValue.current);\n    }\n    const disabled = isOptionDisabled(option, index);\n    const highlighted = latestHighlightedIndex.current === index && index !== -1;\n    return {\n      disabled,\n      highlighted,\n      index,\n      selected\n    };\n  }, [options, multiple, isOptionDisabled, optionComparer, latestSelectedValue, latestHighlightedIndex]);\n  const getOptionTabIndex = React.useCallback(optionState => {\n    if (focusManagement === 'activeDescendant') {\n      return undefined;\n    }\n    if (!optionState.highlighted) {\n      return -1;\n    }\n    if (optionState.disabled && !disabledItemsFocusable) {\n      return -1;\n    }\n    return 0;\n  }, [focusManagement, disabledItemsFocusable]);\n  const getOptionProps = React.useCallback((option, otherHandlers = {}) => {\n    const optionState = getOptionState(option);\n    return _extends({}, otherHandlers, {\n      'aria-disabled': optionState.disabled || undefined,\n      'aria-selected': optionState.selected,\n      id: optionIdGenerator(option, optionState.index),\n      onClick: createHandleOptionClick(option, otherHandlers),\n      onPointerOver: createHandleOptionPointerOver(option, otherHandlers),\n      role: 'option',\n      tabIndex: getOptionTabIndex(optionState)\n    });\n  }, [optionIdGenerator, createHandleOptionClick, createHandleOptionPointerOver, getOptionTabIndex, getOptionState]);\n  React.useDebugValue({\n    highlightedOption: highlightedValue,\n    selectedOption: selectedValue\n  });\n  return {\n    getRootProps,\n    getOptionProps,\n    getOptionState,\n    highlightedOption: highlightedValue,\n    selectedOption: selectedValue,\n    setSelectedValue,\n    setHighlightedValue\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}