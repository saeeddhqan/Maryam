{"ast":null,"code":"var isBrowser = \"object\" !== 'undefined';\nfunction getRegisteredStyles(registered, registeredStyles, classNames) {\n  var rawClassName = '';\n  classNames.split(' ').forEach(function (className) {\n    if (registered[className] !== undefined) {\n      registeredStyles.push(registered[className] + \";\");\n    } else {\n      rawClassName += className + \" \";\n    }\n  });\n  return rawClassName;\n}\nvar registerStyles = function registerStyles(cache, serialized, isStringTag) {\n  var className = cache.key + \"-\" + serialized.name;\n  if (\n  // we only need to add the styles to the registered cache if the\n  // class name could be used further down\n  // the tree but if it's a string tag, we know it won't\n  // so we don't have to add it to registered cache.\n  // this improves memory usage since we can avoid storing the whole style string\n  (isStringTag === false ||\n  // we need to always store it if we're in compat mode and\n  // in node since emotion-server relies on whether a style is in\n  // the registered cache to know whether a style is global or not\n  // also, note that this check will be dead code eliminated in the browser\n  isBrowser === false) && cache.registered[className] === undefined) {\n    cache.registered[className] = serialized.styles;\n  }\n};\nvar insertStyles = function insertStyles(cache, serialized, isStringTag) {\n  registerStyles(cache, serialized, isStringTag);\n  var className = cache.key + \"-\" + serialized.name;\n  if (cache.inserted[serialized.name] === undefined) {\n    var current = serialized;\n    do {\n      var maybeStyles = cache.insert(serialized === current ? \".\" + className : '', current, cache.sheet, true);\n      current = current.next;\n    } while (current !== undefined);\n  }\n};\nexport { getRegisteredStyles, insertStyles, registerStyles };","map":{"version":3,"names":["isBrowser","getRegisteredStyles","registered","registeredStyles","classNames","rawClassName","split","forEach","className","undefined","push","registerStyles","cache","serialized","isStringTag","key","name","styles","insertStyles","inserted","current","maybeStyles","insert","sheet","next"],"sources":["/home/vasu/Gsoc/website/project/node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js"],"sourcesContent":["var isBrowser = \"object\" !== 'undefined';\nfunction getRegisteredStyles(registered, registeredStyles, classNames) {\n  var rawClassName = '';\n  classNames.split(' ').forEach(function (className) {\n    if (registered[className] !== undefined) {\n      registeredStyles.push(registered[className] + \";\");\n    } else {\n      rawClassName += className + \" \";\n    }\n  });\n  return rawClassName;\n}\nvar registerStyles = function registerStyles(cache, serialized, isStringTag) {\n  var className = cache.key + \"-\" + serialized.name;\n\n  if ( // we only need to add the styles to the registered cache if the\n  // class name could be used further down\n  // the tree but if it's a string tag, we know it won't\n  // so we don't have to add it to registered cache.\n  // this improves memory usage since we can avoid storing the whole style string\n  (isStringTag === false || // we need to always store it if we're in compat mode and\n  // in node since emotion-server relies on whether a style is in\n  // the registered cache to know whether a style is global or not\n  // also, note that this check will be dead code eliminated in the browser\n  isBrowser === false ) && cache.registered[className] === undefined) {\n    cache.registered[className] = serialized.styles;\n  }\n};\nvar insertStyles = function insertStyles(cache, serialized, isStringTag) {\n  registerStyles(cache, serialized, isStringTag);\n  var className = cache.key + \"-\" + serialized.name;\n\n  if (cache.inserted[serialized.name] === undefined) {\n    var current = serialized;\n\n    do {\n      var maybeStyles = cache.insert(serialized === current ? \".\" + className : '', current, cache.sheet, true);\n\n      current = current.next;\n    } while (current !== undefined);\n  }\n};\n\nexport { getRegisteredStyles, insertStyles, registerStyles };\n"],"mappings":"AAAA,IAAIA,SAAS,GAAG,QAAQ,KAAK,WAAW;AACxC,SAASC,mBAAmB,CAACC,UAAU,EAAEC,gBAAgB,EAAEC,UAAU,EAAE;EACrE,IAAIC,YAAY,GAAG,EAAE;EACrBD,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,UAAUC,SAAS,EAAE;IACjD,IAAIN,UAAU,CAACM,SAAS,CAAC,KAAKC,SAAS,EAAE;MACvCN,gBAAgB,CAACO,IAAI,CAACR,UAAU,CAACM,SAAS,CAAC,GAAG,GAAG,CAAC;IACpD,CAAC,MAAM;MACLH,YAAY,IAAIG,SAAS,GAAG,GAAG;IACjC;EACF,CAAC,CAAC;EACF,OAAOH,YAAY;AACrB;AACA,IAAIM,cAAc,GAAG,SAASA,cAAc,CAACC,KAAK,EAAEC,UAAU,EAAEC,WAAW,EAAE;EAC3E,IAAIN,SAAS,GAAGI,KAAK,CAACG,GAAG,GAAG,GAAG,GAAGF,UAAU,CAACG,IAAI;EAEjD;EAAK;EACL;EACA;EACA;EACA;EACA,CAACF,WAAW,KAAK,KAAK;EAAI;EAC1B;EACA;EACA;EACAd,SAAS,KAAK,KAAK,KAAMY,KAAK,CAACV,UAAU,CAACM,SAAS,CAAC,KAAKC,SAAS,EAAE;IAClEG,KAAK,CAACV,UAAU,CAACM,SAAS,CAAC,GAAGK,UAAU,CAACI,MAAM;EACjD;AACF,CAAC;AACD,IAAIC,YAAY,GAAG,SAASA,YAAY,CAACN,KAAK,EAAEC,UAAU,EAAEC,WAAW,EAAE;EACvEH,cAAc,CAACC,KAAK,EAAEC,UAAU,EAAEC,WAAW,CAAC;EAC9C,IAAIN,SAAS,GAAGI,KAAK,CAACG,GAAG,GAAG,GAAG,GAAGF,UAAU,CAACG,IAAI;EAEjD,IAAIJ,KAAK,CAACO,QAAQ,CAACN,UAAU,CAACG,IAAI,CAAC,KAAKP,SAAS,EAAE;IACjD,IAAIW,OAAO,GAAGP,UAAU;IAExB,GAAG;MACD,IAAIQ,WAAW,GAAGT,KAAK,CAACU,MAAM,CAACT,UAAU,KAAKO,OAAO,GAAG,GAAG,GAAGZ,SAAS,GAAG,EAAE,EAAEY,OAAO,EAAER,KAAK,CAACW,KAAK,EAAE,IAAI,CAAC;MAEzGH,OAAO,GAAGA,OAAO,CAACI,IAAI;IACxB,CAAC,QAAQJ,OAAO,KAAKX,SAAS;EAChC;AACF,CAAC;AAED,SAASR,mBAAmB,EAAEiB,YAAY,EAAEP,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}