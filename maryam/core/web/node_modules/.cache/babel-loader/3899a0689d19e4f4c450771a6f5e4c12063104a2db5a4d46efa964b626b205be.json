{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { flushSync } from 'react-dom';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0;\n}\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  const {\n      onChange,\n      maxRows,\n      minRows = 1,\n      style,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n  const getUpdatedState = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {};\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle['box-sizing'];\n    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width');\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const updateState = (prevState, newState) => {\n    const {\n      outerHeightStyle,\n      overflow\n    } = newState;\n    // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow,\n        outerHeightStyle\n      };\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (renders.current === 20) {\n        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n      }\n    }\n    return prevState;\n  };\n  const syncHeight = React.useCallback(() => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState(prevState => {\n      return updateState(prevState, newState);\n    });\n  }, [getUpdatedState]);\n  const syncHeightWithFlushSycn = () => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n\n    // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n    // Related issue - https://github.com/facebook/react/issues/24331\n    flushSync(() => {\n      setState(prevState => {\n        return updateState(prevState, newState);\n      });\n    });\n  };\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n\n      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last\n      // ResizeObserver's handler that runs because of the change in the layout is trying to\n      // access a dom node that is no longer there (as the fallback component is being shown instead).\n      // See https://github.com/mui/material-ui/issues/32640\n      if (inputRef.current) {\n        syncHeightWithFlushSycn();\n      }\n    });\n    const containerWindow = ownerWindow(inputRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(inputRef.current);\n    }\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  });\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n  const handleChange = event => {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : null\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        padding: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","flushSync","unstable_debounce","debounce","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_ownerWindow","ownerWindow","jsx","_jsx","jsxs","_jsxs","getStyleValue","computedStyle","property","parseInt","styles","shadow","visibility","position","overflow","height","top","left","transform","isEmpty","obj","undefined","Object","keys","length","TextareaAutosize","forwardRef","props","ref","onChange","maxRows","minRows","style","value","other","current","isControlled","useRef","inputRef","handleRef","shadowRef","renders","state","setState","useState","getUpdatedState","useCallback","input","containerWindow","getComputedStyle","width","inputShallow","placeholder","slice","boxSizing","padding","border","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","outerHeightStyle","abs","updateState","prevState","newState","process","env","NODE_ENV","console","error","join","syncHeight","syncHeightWithFlushSycn","useEffect","handleResize","addEventListener","resizeObserver","ResizeObserver","observe","clear","removeEventListener","disconnect","handleChange","event","Fragment","children","rows","className","readOnly","tabIndex","propTypes","string","oneOfType","number","func","object","arrayOf"],"sources":["/home/vasu/Gsoc/website/project/node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { flushSync } from 'react-dom';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0;\n}\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  const {\n      onChange,\n      maxRows,\n      minRows = 1,\n      style,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n  const getUpdatedState = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {};\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle['box-sizing'];\n    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width');\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const updateState = (prevState, newState) => {\n    const {\n      outerHeightStyle,\n      overflow\n    } = newState;\n    // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow,\n        outerHeightStyle\n      };\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (renders.current === 20) {\n        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n      }\n    }\n    return prevState;\n  };\n  const syncHeight = React.useCallback(() => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState(prevState => {\n      return updateState(prevState, newState);\n    });\n  }, [getUpdatedState]);\n  const syncHeightWithFlushSycn = () => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n\n    // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n    // Related issue - https://github.com/facebook/react/issues/24331\n    flushSync(() => {\n      setState(prevState => {\n        return updateState(prevState, newState);\n      });\n    });\n  };\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n\n      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last\n      // ResizeObserver's handler that runs because of the change in the layout is trying to\n      // access a dom node that is no longer there (as the fallback component is being shown instead).\n      // See https://github.com/mui/material-ui/issues/32640\n      if (inputRef.current) {\n        syncHeightWithFlushSycn();\n      }\n    });\n    const containerWindow = ownerWindow(inputRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(inputRef.current);\n    }\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  });\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n  const handleChange = event => {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : null\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        padding: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}