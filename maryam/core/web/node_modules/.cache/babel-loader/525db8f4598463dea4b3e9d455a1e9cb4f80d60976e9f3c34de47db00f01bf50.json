{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/private-theming';\nimport { exactProp } from '@mui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useTheme from '../useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst EMPTY_THEME = {};\nfunction InnerThemeProvider(props) {\n  const theme = useTheme();\n  return /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n    value: typeof theme === 'object' ? theme : EMPTY_THEME,\n    children: props.children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? InnerThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node\n} : void 0;\n\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n */\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: localTheme,\n    children: /*#__PURE__*/_jsx(InnerThemeProvider, {\n      children: children\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\nexport default ThemeProvider;","map":{"version":3,"names":["React","PropTypes","ThemeProvider","MuiThemeProvider","exactProp","ThemeContext","StyledEngineThemeContext","useTheme","jsx","_jsx","EMPTY_THEME","InnerThemeProvider","props","theme","Provider","value","children","process","env","NODE_ENV","propTypes","node","localTheme","oneOfType","func","object","isRequired"],"sources":["/home/vasu/Gsoc/website/project/node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/private-theming';\nimport { exactProp } from '@mui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useTheme from '../useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst EMPTY_THEME = {};\nfunction InnerThemeProvider(props) {\n  const theme = useTheme();\n  return /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n    value: typeof theme === 'object' ? theme : EMPTY_THEME,\n    children: props.children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? InnerThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node\n} : void 0;\n\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n */\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: localTheme,\n    children: /*#__PURE__*/_jsx(InnerThemeProvider, {\n      children: children\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\nexport default ThemeProvider;"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,aAAa,IAAIC,gBAAgB,QAAQ,sBAAsB;AACxE,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,YAAY,IAAIC,wBAAwB,QAAQ,oBAAoB;AAC7E,OAAOC,QAAQ,MAAM,aAAa;AAClC,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,MAAMC,WAAW,GAAG,CAAC,CAAC;AACtB,SAASC,kBAAkB,CAACC,KAAK,EAAE;EACjC,MAAMC,KAAK,GAAGN,QAAQ,EAAE;EACxB,OAAO,aAAaE,IAAI,CAACH,wBAAwB,CAACQ,QAAQ,EAAE;IAC1DC,KAAK,EAAE,OAAOF,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGH,WAAW;IACtDM,QAAQ,EAAEJ,KAAK,CAACI;EAClB,CAAC,CAAC;AACJ;AACAC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGR,kBAAkB,CAACS,SAAS,GAAG;EACrE;AACF;AACA;EACEJ,QAAQ,EAAEf,SAAS,CAACoB;AACtB,CAAC,GAAG,KAAK,CAAC;;AAEV;AACA;AACA;AACA;AACA,SAASnB,aAAa,CAACU,KAAK,EAAE;EAC5B,MAAM;IACJI,QAAQ;IACRH,KAAK,EAAES;EACT,CAAC,GAAGV,KAAK;EACT,OAAO,aAAaH,IAAI,CAACN,gBAAgB,EAAE;IACzCU,KAAK,EAAES,UAAU;IACjBN,QAAQ,EAAE,aAAaP,IAAI,CAACE,kBAAkB,EAAE;MAC9CK,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC,CAAC;AACJ;AACAC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGjB,aAAa,CAACkB,SAAS,CAAC,yBAAyB;EACvF;EACA;EACA;EACA;EACA;AACF;AACA;EACEJ,QAAQ,EAAEf,SAAS,CAACoB,IAAI;EACxB;AACF;AACA;EACER,KAAK,EAAEZ,SAAS,CAACsB,SAAS,CAAC,CAACtB,SAAS,CAACuB,IAAI,EAAEvB,SAAS,CAACwB,MAAM,CAAC,CAAC,CAACC;AACjE,CAAC,GAAG,KAAK,CAAC;AACV,IAAIT,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCF,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGjB,aAAa,CAACkB,SAAS,GAAGhB,SAAS,CAACF,aAAa,CAACkB,SAAS,CAAC,GAAG,KAAK,CAAC;AAC/G;AACA,eAAelB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}